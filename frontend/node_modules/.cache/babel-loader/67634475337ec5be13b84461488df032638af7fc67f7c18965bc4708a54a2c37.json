{"ast":null,"code":"var _jsxFileName = \"/Users/paras/Desktop/project1/frontend/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\n// ChartComponent.js\nimport React, { useState, useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('../dataset.csv'); // Replace with your actual CSV file path\n        const csvData = await response.text();\n        const parsedData = Papa.parse(csvData, {\n          header: true\n        });\n        console.log(parsedData);\n        const trace1 = {\n          x: parsedData.data.map(entry => entry.timestamp),\n          y: parsedData.data.map(entry => parseFloat(entry.profit_percentage)),\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: {\n            color: 'red'\n          }\n        };\n        const trace2 = {\n          type: 'bar',\n          x: parsedData.data.map(entry => entry.timestamp),\n          y: parsedData.data.map(entry => parseFloat(entry.profit_percentage))\n        };\n        setChartData([trace1, trace2]);\n      } catch (error) {\n        console.error('Error fetching or parsing CSV data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    data: chartData,\n    layout: {\n      width: 800,\n      height: 400,\n      title: 'Profit Percentage Over Time'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartComponent, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useState","useEffect","Plot","Papa","jsxDEV","_jsxDEV","ChartComponent","_s","chartData","setChartData","fetchData","response","fetch","csvData","text","parsedData","parse","header","console","log","trace1","x","data","map","entry","timestamp","y","parseFloat","profit_percentage","type","mode","marker","color","trace2","error","layout","width","height","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/paras/Desktop/project1/frontend/src/components/ChartComponent.js"],"sourcesContent":["// ChartComponent.js\nimport React, { useState, useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport Papa from 'papaparse';\n\nconst ChartComponent = () => {\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('../dataset.csv'); // Replace with your actual CSV file path\n        const csvData = await response.text();\n        \n\n        const parsedData = Papa.parse(csvData, { header: true });\n        console.log(parsedData);\n\n        const trace1 = {\n          x: parsedData.data.map((entry) => entry.timestamp),\n          y: parsedData.data.map((entry) => parseFloat(entry.profit_percentage)),\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: { color: 'red' },\n        };\n\n        const trace2 = {\n          type: 'bar',\n          x: parsedData.data.map((entry) => entry.timestamp),\n          y: parsedData.data.map((entry) => parseFloat(entry.profit_percentage)),\n        };\n\n        setChartData([trace1, trace2]);\n      } catch (error) {\n        console.error('Error fetching or parsing CSV data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <Plot\n      data={chartData}\n      layout={{ width: 800, height: 400, title: 'Profit Percentage Over Time' }}\n    />\n  );\n};\n\nexport default ChartComponent;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAChD,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAGrC,MAAMC,UAAU,GAAGZ,IAAI,CAACa,KAAK,CAACH,OAAO,EAAE;UAAEI,MAAM,EAAE;QAAK,CAAC,CAAC;QACxDC,OAAO,CAACC,GAAG,CAACJ,UAAU,CAAC;QAEvB,MAAMK,MAAM,GAAG;UACbC,CAAC,EAAEN,UAAU,CAACO,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,SAAS,CAAC;UAClDC,CAAC,EAAEX,UAAU,CAACO,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAKG,UAAU,CAACH,KAAK,CAACI,iBAAiB,CAAC,CAAC;UACtEC,IAAI,EAAE,SAAS;UACfC,IAAI,EAAE,eAAe;UACrBC,MAAM,EAAE;YAAEC,KAAK,EAAE;UAAM;QACzB,CAAC;QAED,MAAMC,MAAM,GAAG;UACbJ,IAAI,EAAE,KAAK;UACXR,CAAC,EAAEN,UAAU,CAACO,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,SAAS,CAAC;UAClDC,CAAC,EAAEX,UAAU,CAACO,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAKG,UAAU,CAACH,KAAK,CAACI,iBAAiB,CAAC;QACvE,CAAC;QAEDnB,YAAY,CAAC,CAACW,MAAM,EAAEa,MAAM,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhB,OAAO,CAACgB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF,CAAC;IAEDxB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAACH,IAAI;IACHoB,IAAI,EAAEd,SAAU;IAChB2B,MAAM,EAAE;MAAEC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE,GAAG;MAAEC,KAAK,EAAE;IAA8B;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEN,CAAC;AAACnC,EAAA,CA1CID,cAAc;AAAAqC,EAAA,GAAdrC,cAAc;AA4CpB,eAAeA,cAAc;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}