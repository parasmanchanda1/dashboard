{"ast":null,"code":"var _jsxFileName = \"/Users/paras/Desktop/project1/frontend/src/components/graph.js\",\n  _s = $RefreshSig$();\n// ChartComponent.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('your_csv_file.csv'); // Replace with your actual CSV file path\n        const csvData = await response.text();\n        const parsedData = Papa.parse(csvData, {\n          header: true\n        });\n        const labels = parsedData.data.map(entry => entry.Label);\n        const values = parsedData.data.map(entry => parseFloat(entry.Value));\n        const chartData = {\n          labels,\n          datasets: [{\n            label: 'Graph from CSV Data',\n            data: values,\n            fill: false,\n            backgroundColor: 'rgba(75,192,192,0.2)',\n            borderColor: 'rgba(75,192,192,1)'\n          }]\n        };\n        setChartData(chartData);\n      } catch (error) {\n        console.error('Error fetching or parsing CSV data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Graph from CSV Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartComponent, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useState","useEffect","Line","Papa","jsxDEV","_jsxDEV","ChartComponent","_s","chartData","setChartData","fetchData","response","fetch","csvData","text","parsedData","parse","header","labels","data","map","entry","Label","values","parseFloat","Value","datasets","label","fill","backgroundColor","borderColor","error","console","options","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/paras/Desktop/project1/frontend/src/components/graph.js"],"sourcesContent":["// ChartComponent.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Papa from 'papaparse';\n\nconst ChartComponent = () => {\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('your_csv_file.csv'); // Replace with your actual CSV file path\n        const csvData = await response.text();\n\n        const parsedData = Papa.parse(csvData, { header: true });\n\n        const labels = parsedData.data.map((entry) => entry.Label);\n        const values = parsedData.data.map((entry) => parseFloat(entry.Value));\n\n        const chartData = {\n          labels,\n          datasets: [\n            {\n              label: 'Graph from CSV Data',\n              data: values,\n              fill: false,\n              backgroundColor: 'rgba(75,192,192,0.2)',\n              borderColor: 'rgba(75,192,192,1)',\n            },\n          ],\n        };\n\n        setChartData(chartData);\n      } catch (error) {\n        console.error('Error fetching or parsing CSV data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h2>Graph from CSV Data</h2>\n      {chartData && <Line data={chartData} options={options} />}\n    </div>\n  );\n};\n\nexport default ChartComponent;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACnD,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAErC,MAAMC,UAAU,GAAGZ,IAAI,CAACa,KAAK,CAACH,OAAO,EAAE;UAAEI,MAAM,EAAE;QAAK,CAAC,CAAC;QAExD,MAAMC,MAAM,GAAGH,UAAU,CAACI,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC;QAC1D,MAAMC,MAAM,GAAGR,UAAU,CAACI,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAKG,UAAU,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC;QAEtE,MAAMjB,SAAS,GAAG;UAChBU,MAAM;UACNQ,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,qBAAqB;YAC5BR,IAAI,EAAEI,MAAM;YACZK,IAAI,EAAE,KAAK;YACXC,eAAe,EAAE,sBAAsB;YACvCC,WAAW,EAAE;UACf,CAAC;QAEL,CAAC;QAEDrB,YAAY,CAACD,SAAS,CAAC;MACzB,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF,CAAC;IAEDrB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuB,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAED,oBACE/B,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3BjC,SAAS,iBAAIH,OAAA,CAACH,IAAI;MAACiB,IAAI,EAAEX,SAAU;MAACyB,OAAO,EAAEA;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAAClC,EAAA,CAlDID,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AAoDpB,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}