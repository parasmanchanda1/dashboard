{"ast":null,"code":"var _jsxFileName = \"/Users/paras/Desktop/project2/frontend/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = () => {\n  _s();\n  const [downsampledData, setDownsampledData] = useState([]);\n  useEffect(() => {\n    // Fetch downsampled data from the API endpoint\n    axios.get('http://localhost:3001/api/downsample').then(response => {\n      const data = response.data.downsampledData;\n      setDownsampledData(data);\n    }).catch(error => {\n      console.error('Error fetching downsampled data:', error);\n    });\n  }, []);\n  const timestamps = downsampledData.map(item => item.timestamp);\n  const percentages = downsampledData.map(item => item.percentage);\n  const chartData = timestamps.map((value, index) => ({\n    x: index,\n    data1: value,\n    data2: percentages[index]\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 800,\n      height: 400,\n      data: chartData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"data1\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"data2\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartComponent, \"x2UgJ93dKS+pijb0zryaS2kIsdw=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["axios","React","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","ChartComponent","_s","downsampledData","setDownsampledData","get","then","response","data","catch","error","console","timestamps","map","item","timestamp","percentages","percentage","chartData","value","index","x","data1","data2","children","width","height","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["/Users/paras/Desktop/project2/frontend/src/components/ChartComponent.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n\nconst ChartComponent = () => {\n  const [downsampledData, setDownsampledData] = useState([]);\n\n  useEffect(() => {\n    // Fetch downsampled data from the API endpoint\n    axios.get('http://localhost:3001/api/downsample')\n      .then(response => {\n        const data = response.data.downsampledData;\n        setDownsampledData(data);\n      })\n      .catch(error => {\n        console.error('Error fetching downsampled data:', error);\n      });\n  }, []);\n\n  \n\n  const timestamps = downsampledData.map(item => item.timestamp);\n  const percentages = downsampledData.map(item => item.percentage);\n\n  const chartData = timestamps.map((value, index) => ({\n    x: index,\n    data1: value,\n    data2: percentages[index],\n  }));\n\n  return (\n    <div>\n      <LineChart width={800} height={400} data={chartData}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"x\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"data1\" stroke=\"#8884d8\" />\n      <Line type=\"monotone\" dataKey=\"data2\" stroke=\"#82ca9d\" />\n    </LineChart>\n    </div>\n  );\n};\n\nexport default ChartComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}